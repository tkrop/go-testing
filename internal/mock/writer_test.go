package mock_test

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/assert"

	. "github.com/tkrop/go-testing/internal/mock"
	"github.com/tkrop/go-testing/test"
)

var genIFace = `// Code generated by mock; DO NOT EDIT.
package mock

import (
	"reflect"
	"github.com/golang/mock/gomock"
)
`

type GenerateParams struct {
	file   *File
	expect string
}

var testGenerateParams = map[string]GenerateParams{
	"simple file": {
		file: &File{
			Target: Type{Package: "mock"},
			Imports: []*Import{
				{Path: "reflect"},
				{Path: "github.com/golang/mock/gomock"},
			},
			Mocks: []*Mock{{
				Source:  sourceIFaceAny,
				Target:  Type{Package: pkgMock, Name: ifaceMock},
				Methods: methodsMockIFace,
			}},
		},
		expect: genIFace,
	},
}

func xTestGenerate(t *testing.T) {
	test.Map(t, testGenerateParams).Run(func(t test.Test, param GenerateParams) {
		// Given
		temp := NewTemplate()
		writer := &bytes.Buffer{}

		// When
		temp.Execute(writer, param.file)

		// Then
		assert.Equal(t, param.expect, writer.String())
	})
}
