// Code generated by mock; DO NOT EDIT.
package mock

import (
	"reflect"
	"github.com/golang/mock/gomock"
	"github.com/tkrop/go-testing/mock"
	"github.com/tkrop/go-testing/internal/mock/test"
	testing_test "github.com/tkrop/go-testing/test"
	"github.com/tkrop/go-testing/internal/mock"
)

// MockIFace is a mock of github.com/tkrop/go-testing/internal/mock/test.IFace (iface.go:15).
type MockIFace struct {
	ctrl     *gomock.Controller
	recorder *MockIFaceRecorder
}

// MockIFaceRecorder is the mock recorder for MockIFace.
type MockIFaceRecorder struct {
	mock *MockIFace
}

// NewMockIFace creates a new mock instance.
func NewMockIFace(ctrl *gomock.Controller) *MockIFace {
	mock := &MockIFace{ctrl: ctrl}
	mock.recorder = &MockIFaceRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFace) EXPECT() *MockIFaceRecorder {
	return m.recorder
}

// CallA is the mock method to capture a coresponding call.
func (m *MockIFace) CallA(value *test.Struct, args []*reflect.Value) ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallA", value, args)

	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)

	return ret0, ret1
}

// CallA is the recorder method to indicates an expected call.
func (mr *MockIFaceRecorder) CallA(value *test.Struct, args []*reflect.Value) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallA",
		reflect.TypeOf((*MockIFace)(nil).CallA), value, args)
}

// CallB is the mock method to capture a coresponding call.
func (m *MockIFace) CallB(test testing_test.Tester) (func([]*File) []any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallB", test)

	fn, _ := ret[0].(func([]*File) []any)
	err, _ := ret[1].(error)

	return fn, err
}

// CallB is the recorder method to indicates an expected call.
func (mr *MockIFaceRecorder) CallB(test testing_test.Tester) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallB",
		reflect.TypeOf((*MockIFace)(nil).CallB), test)
}
